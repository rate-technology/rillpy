name: Release

on:
  release:
    types: [created]

jobs:
  rust-publish:
    if: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1

      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Publishing crates
        uses: katyo/publish-crates@v1
        with:
          registry-token: ${{ secrets.CARGO_TOKEN }}

  python-publish:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v1

      - uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Build Python package
        if:  matrix.os != 'windows-latest'
        run: poetry run maturin build --release --no-sdist --strip --interpreter python${{matrix.python-version}}

      - name: Build Python package
        if: matrix.os == 'windows-latest'
        run: poetry run maturin build --release --no-sdist --strip --interpreter python

      - name: List wheels
        if:  matrix.os != 'windows-latest'
        run: find ./target/wheels/

      - name: List wheels
        if: matrix.os == 'windows-latest'
        run: dir target\wheels\

      # Note: Windows doesn't support glob
      # https://stackoverflow.com/a/52481267/270334
      - name: Install wheels
        if:  matrix.os == 'windows-latest'
        run: pip install --find-links=target\wheels rillrate

      - name: Install wheels
        if:  matrix.os != 'windows-latest'
        run: pip install target/wheels/rillrate*.whl

      - name: Release
        uses: softprops/action-gh-release@v1
        #if: startsWith(github.ref, 'refs/tags/')
        with:
          files: target/wheels/rillrate*.whl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: PyPi publish
        #if: github.event_name == 'release' && github.event.action == 'created'
        if:  matrix.os != 'windows-latest'
        env:
          MATURIN_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: poetry run maturin publish --username __token__ --interpreter python${{matrix.python-version}}

      - name: PyPi publish
        #if: github.event_name == 'release' && github.event.action == 'created'
        if: matrix.os == 'windows-latest'
        env:
          MATURIN_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: poetry run maturin publish --username __token__ --interpreter python

  release-github-pypi:
    if: false
    name: Release Github and PyPI
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: rillrate-x86_64-unknown-linux-musl.tar.gz
          - target: x86_64-apple-darwin
            os: macOS-latest
            name: rillrate-x86_64-apple-darwin.tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: rillrate-x86_64-pc-windows-msvc.zip
    runs-on: ${{ matrix.os }}
    steps:
      # Largely inspired by https://github.com/starship/starship/blob/35a0a20f5c4fea6a08e1b91ff631b089eef8fc50/.github/workflows/deploy.yml
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install poetry
          poetry install

      - name: Install musl tools
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt install -y musl-tools

      # Those two will also create target/${{ matrix.target }}/maturin
      - name: Publish to pypi (with sdist)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        env:
          MATURIN_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: cargo run -- publish -u __token__ -b bin --target ${{ matrix.target }}

      - name: Publish to pypi (without sdist)
        if: matrix.target != 'x86_64-unknown-linux-musl'
        env:
          MATURIN_PASSWORD: ${{ secrets.PYPI_TOKEN }}
        run: cargo run -- publish -u __token__ -b bin --target ${{ matrix.target }} --no-sdist

      - name: Archive binary (windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.name }} ${{ github.event.repository.name }}.exe
          cd -
      - name: Archive binary (linux and mac)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf ../../../${{ matrix.name }} ${{ github.event.repository.name }}
          cd -
      - name: Build debian package
        if: false # matrix.target == 'x86_64-unknown-linux-musl'
        env:
          BINARY_NAME: ${{ github.event.repository.name }}
          TARGET: ${{ matrix.target }}
          VERSION: ${{ github.ref }}
        run: ci/build_deb.sh

      - name: Upload to github release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: '*.{tar.gz,zip,deb}'
          file_glob: true
          tag: ${{ github.ref }}
